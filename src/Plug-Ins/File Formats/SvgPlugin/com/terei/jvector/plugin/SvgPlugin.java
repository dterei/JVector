/*
 * Copyright 2004 David Terei
 * 
 * This file is part of JVector.
 * 
 * JVector is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * JVector is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with JVector; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.terei.jvector.plugin;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.RenderingHints;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;

import javax.swing.filechooser.FileFilter;

import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.dom.GenericDOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.DOMImplementation;

import com.terei.jvector.gui.SwingFileFilter;
import com.terei.jvector.paint.ImageFile;
import com.terei.jvector.paint.shapes.Shape;


/**
 * An ImagePlugin that allows the saving of a
 * JVector Image to a SVG image.
 * 
 * @author David Terei
 * @version 1
 * @since 1/06/2004
 */
public class SvgPlugin implements ImagePlugin {   
    
    private static final String COMMENT = "Generated by JVector SvgPlugin with Batik SVG Generator";

	/**
     * The extnesion of this image type
     */
    private static final String IMAGE_EXT = "svg";
    
    /**
     * The description of the filter built by this plugin.
     */
    private static final String IMAGE_DES = "SVG Image Format (." 
        											+ IMAGE_EXT + ")";
    
    /* (non-Javadoc)
     * @see com.terei.jvector.plugin.ImagePlugin#getExtension()
     */
    public String getExtension() {
        return IMAGE_EXT;
    }

    /* (non-Javadoc)
     * @see com.terei.jvector.plugin.ImagePlugin#getFileFilter()
     */
    public FileFilter getFileFilter() {
        return new SwingFileFilter(IMAGE_EXT, IMAGE_DES, true);
    }
    
    /* (non-Javadoc)
     * @see com.terei.jvector.plugin.ImagePlugin#save(com.terei.jvector.paint.ImageFile, java.io.File)
     */
    public boolean save(ImageFile image, File file) {
    	//TODO: Handle Zoom Level.
        //get the shapes to paint.
        Shape[] shapes = image.getShapes();
        
        //Get a DOMImplementation
        DOMImplementation domImpl =
            GenericDOMImplementation.getDOMImplementation();

        //Create an instance of org.w3c.dom.Document
        Document document = domImpl.createDocument(null, IMAGE_EXT, null);
        
        //customise the outputted SVG to include our comment instead of the default.
        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
        ctx.setComment(COMMENT);
        
        //Create an instance of the SVG Generator
        SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, false);
        
        //turn Antialiasing on.
        //TODO provide option.
    	svgGenerator.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
    	        RenderingHints.VALUE_ANTIALIAS_ON);
    	svgGenerator.setBackground(Color.white);
    	svgGenerator.setSVGCanvasSize(new Dimension(image.getWidth(),
    			image.getHeight()));
    	
    	//draw all the shapes.
    	for(Shape s : shapes)
    		s.paint(svgGenerator);
    	
    	//check its got the image extension
    	String name = file.getName();
    	
    	if (!name.endsWith("."+IMAGE_EXT)) {
            String path = file.getAbsolutePath()+"."+IMAGE_EXT;
            file = new File(path);
        }
    	
    	//Finally, stream out SVG to the standard output using UTF-8
    	//character to byte encoding    	
    	try {
    	    boolean useCSS = true; // we want to use CSS style attribute
    	    FileOutputStream fos = new FileOutputStream(file);
    	    Writer out = new OutputStreamWriter(fos, "UTF-8");
    	    svgGenerator.stream(out, useCSS);
    	} catch (Exception e) {
    	    System.err.println("Exception saving image: " + e);
    	}
        
        return true;
    }

}
