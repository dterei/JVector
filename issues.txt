--------------
Current Issues
--------------
#Bug 4: Polygon's have a problem with transparency. The outline of polygon's
        and their fill overlap, resulting in unwanted blending.

#Bug 12: Build system is broken. The ant build script works fine except when running the main
         target, compile, which causes a Java compiler error.

---------------
Previous Issues
---------------
#Bug 6: (12/10/05) When zooming, the image 'flashes,' seems like the image zooms in, refreshes,
        then goes to the point clicked, so that the image moves between 2 points
        quickly, causing a 'flashing' feel.

		Outcome: Method no longer works in JDK1.5, so now no longer a bug but a
		missing feature.

#Bug 12: (12/10/05) Problem occurs when saving images that are zoomed in.

		 Outcome: Fixed the bug by saving the zoom level to the file now,
		 so when the image is restored it is restored to the zoom level you
		 saved it at.

#Bug 9: (22/07/05) Changing the Double click speed required to end the drawing of a polygon
        under preferences, while JVector is running, only works if the new double
        click value is less then the original. The new value only takes place when
        JVector is restarted.
        
        Outcome: Relised that a couple of versions ago I had dropped the old 
                 mouse double click detection method which used a thread as a
                 timer for a far easier solution implemented by java. This does
                 mean though that I cant adjust the timings of double clicks.

#Bug 11: (21/07/05) - There was a small gap of one pixel between the right and
          bottom edge of the fill and the starting corresponding edge of the
          outline.
          
          Outcome: Well I really dont like the way java does drawing of shapes
                   with outlines. Not only was the the inital problem with overlapping
                   fill which lead to the creation of my own 'shapes' but the outline
                   sits with its center line being the dimensions of the shape. This
                   caused this whole problem. It has been fixed, and also changed
                   so that the users mouse sits on the very top left edge and then right
                   edge when drawing, instead of in the middle of the outline (how java
                   does it).
                   
#Bug 10: (8/07/04) - Under JDK1.5 the tabbed pane no longer works, you are unable 
         to change images.

         Outcome: Bug traced to a problem with the status bar/tooltips system.
                  Bugged fixed by adding code to stop the hints being enabled on
                  JtabbedPane components.

#Bug 8: (16/06/04) - Saving when not at 100% zoom level results in problems.
        The saving actually works fine, but the working size values are saved at the
        current zoom level, and so when reopened are at that old zoom level until the
        image is zoomed in on. I tryed just refreshing the zoom, but due to the sizes
        of the tab not yet having been calcualted, it failed. I need to implement a clone
        method on the shapes, so that i can resize them to 100% zoom before there saved,
        without affecting the open image.

        Outcome: Far better solution found. By SPlitting up the zooming code into resizing of the
                 view, and resizing of the shapes, i was able to create a 'refresh' zoom method
                 (revalidateZoom() to be exact). By calling this after an image is saved and
                 opened, the problem was fixed.

#Bug 7: (01/06/04) - Problem with the JPG plugin, it create JPg's that are inverted. I think this
        this problem goes deeper then just the plugin though, as its code appears fine,
        and some testing has discovered the problems isnt so simple.
        
	    Outcome: JpgPlugin, now paints a white rectangle across the whole image first, before
	             painting the images. Future version could allow the user to pick this 'background'
	             colour.

#Bug 5: (01/06/04) - Zooming Problems: - Unable to select lines when zoomed.
						  - Unable to select text when zoomed.
						  - Moving of Rectangles, Ovals, Polygon, when zoomed
						    moves them incorrectly.
						  - Moving of Polygons when zoomed causes them to stay at
						    the size they were when moved, on the next zoom.
						    
	     Outcome: Problem solved quite easily, see the source code for details.

# BUG 3: (15/05/04) - Self executing jar archive does not work, due to the 
         loading of the swatches i believe.
         
         Outcome: New File created, Resources/Swatches/swatches.properties, 
                  that specifies which swatches to load. This fixed the problem 
                  as before, the  swatches were loaded automatically by using 
                  File's and InputStream's to automatically load all the 
                  swatches in the swatches directory. Because of the reliance 
                  of this method on File's and InputStream it didnt work in Jar 
                  files. Also problems were also encounted on Mac OS X, even 
                  when not in a Jar. This new Method fies all of these issues.

# BUG 2: (11/05/04) - The switcher button in the ColorPanel, that swapped the 
         foreground and background colours, does not work when the tool that 
         was first selected when the program starts, is currently selected. 
         No errors are thrown, it just ignores the command.

         Outcome: Issue resolved. Discovered that everytime the extra tool bar 
                  was modified (resized, components added/removed) i was running 
                  a method that caused a new ColorPanel class to created, ending 
                  up with 10 or so ColorPanel classes open from the start. This 
                  was a fairly simple fix of some code restructuring.

# ISSUE 1: (10/5/04) - The ColourSwatch class neeeds a component to display the 
           selectable colours in. JButton and JLabel have been tryed without 
           sucess so far.

           Outcome: Issue resolved through the use of a sublcass of JComponent.

# FIX 1: (4/05/04) - NewImageDialog holds a reference to the LePaint class that 
         intialised it. This is a poorly designed method. Instead a getDone() 
         method should be implemented so that the LePaint class can check when 
         its done.

         Outcome: The solution to this problem required more code and work then 
                  worth the issue. The current method works fine anyway, and 
                  this fix was more a issue of beatiful code, anyway.

# BUG 1: (22/04/04) - The current method of adding this JPanel to the extra tool 
         bar has resulted in a bug, by which, if the tool bar is  floating, when 
         the line tool is pressed (thus the LineOption JPanel created) then a 
         whole new extra tool bar is created, instead of the existing one modified.
         
         Outcome: Issue resolved.